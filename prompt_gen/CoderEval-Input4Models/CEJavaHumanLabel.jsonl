{"question_id": "6367676d1a6d9265ec018229", "input": "/**Trim each element in the given string array and return the resulting array.**/\npublic static String[] trimArrayElements(String[] array){", "signature": "public static String[] trimArrayElements(String[] array){", "docstring": "Trim each element in the given string array and return the resulting array."}
{"question_id": "6367670b1a6d9265ec017a00", "input": "/**Check whether the length of the given two byte arrays is the same.**/\npublic static boolean isSameLength(final byte[] array1,final byte[] array2){", "signature": "public static boolean isSameLength(final byte[] array1,final byte[] array2){", "docstring": "Check whether the length of the given two byte arrays is the same."}
{"question_id": "636766a91a6d9265ec0175c2", "input": "/**Pop an abstract type from the output frame stack and return its value.**/\nprivate int pop(){", "signature": "private int pop(){", "docstring": "Pop an abstract type from the output frame stack and return its value."}
{"question_id": "636767081a6d9265ec017989", "input": "/**Convert the given Boolean array to primitives. Return ArrayUtils.EMPTY_BOOLEAN_ARRAY for an empty array, return null for null array.**/\npublic static boolean[] toPrimitive(final Boolean[] array){", "signature": "public static boolean[] toPrimitive(final Boolean[] array){", "docstring": "Convert the given Boolean array to primitives. Return ArrayUtils.EMPTY_BOOLEAN_ARRAY for an empty array, return null for null array."}
{"question_id": "6367672d1a6d9265ec017c73", "input": "/** If the message does not exist in the dict messages, or it exists but the timestamp (seconds) difference is bigger than 10, put the message and timestamp into messages and return true, otherwise return false.**/\npublic boolean shouldPrintMessage(int timestamp,String message){", "signature": "public boolean shouldPrintMessage(int timestamp,String message){", "docstring": " If the message does not exist in the dict messages, or it exists but the timestamp (seconds) difference is bigger than 10, put the message and timestamp into messages and return true, otherwise return false."}
{"question_id": "636766f81a6d9265ec01775c", "input": "/**Return the string representation of the given object, return an empty string if the object is null.**/\npublic static String toString(Object obj){", "signature": "public static String toString(Object obj){", "docstring": "Return the string representation of the given object, return an empty string if the object is null."}
{"question_id": "6367667f1a6d9265ec017457", "input": "/**Decode octets to characters with UTF-8, append them to the given StringBuilder, and return the index to the next unchecked character.**/\nprivate static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){", "signature": "private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){", "docstring": "Decode octets to characters with UTF-8, append them to the given StringBuilder, and return the index to the next unchecked character."}
{"question_id": "636766aa1a6d9265ec0175ce", "input": "/**Init a currentFrame with the given offset, numLocal and numStack, return 3 finally.**/\nint visitFrameStart(final int offset,final int numLocal,final int numStack){", "signature": "int visitFrameStart(final int offset,final int numLocal,final int numStack){", "docstring": "Init a currentFrame with the given offset, numLocal and numStack, return 3 finally."}
{"question_id": "636767191a6d9265ec017c0f", "input": "/**Enlarge the byte vector data, by increasing it by the given size.**/\nprivate void enlarge(final int size){", "signature": "private void enlarge(final int size){", "docstring": "Enlarge the byte vector data, by increasing it by the given size."}
{"question_id": "636767821a6d9265ec0183a0", "input": "/**Delete the given file if it exists**/\nprotected static void deleteFile(String fileName){", "signature": "protected static void deleteFile(String fileName){", "docstring": "Delete the given file if it exists"}
{"question_id": "636767691a6d9265ec0181aa", "input": "/**Compute the hash code of the whole array, by accumulating the multiplication of each element hash code and the  MULTIPLIER.**/\npublic static int nullSafeHashCode(long[] array){", "signature": "public static int nullSafeHashCode(long[] array){", "docstring": "Compute the hash code of the whole array, by accumulating the multiplication of each element hash code and the  MULTIPLIER."}
{"question_id": "636767441a6d9265ec017cc1", "input": "/**Perform a right node rotation on the AVL tree.**/\nprivate TreeNode<T> rotateRight(TreeNode<T> node){", "signature": "private TreeNode<T> rotateRight(TreeNode<T> node){", "docstring": "Perform a right node rotation on the AVL tree."}
{"question_id": "6367667f1a6d9265ec01745c", "input": "/**Add all the jar files in the given dir to the classpath. The classpath is represented as a Vector of URLs.**/\n@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){", "signature": "@SuppressWarnings(\"unchecked\") public static void addToClassPath(Vector<URL> cpV,String dir){", "docstring": "Add all the jar files in the given dir to the classpath. The classpath is represented as a Vector of URLs."}
{"question_id": "6367677e1a6d9265ec01830f", "input": "/**Format the buffered string with the pattern converter, and return the result.**/\npublic String format(LoggingEvent event){", "signature": "public String format(LoggingEvent event){", "docstring": "Format the buffered string with the pattern converter, and return the result."}
{"question_id": "636767031a6d9265ec0178dd", "input": "/**Compute and return the length of the request content header, return the content length if NumberFormatException happens.**/\npublic long contentLength(){", "signature": "public long contentLength(){", "docstring": "Compute and return the length of the request content header, return the content length if NumberFormatException happens."}
{"question_id": "636766f11a6d9265ec017658", "input": "/**Return the index of the last directory separator character, under Unix or Windows.**/\npublic static int indexOfLastSeparator(String filename){", "signature": "public static int indexOfLastSeparator(String filename){", "docstring": "Return the index of the last directory separator character, under Unix or Windows."}
{"question_id": "636767121a6d9265ec017b0a", "input": "/**Parse the header part starting from the given end position and return the index of the enter sequence. **/\nprivate int parseEndOfLine(String headerPart,int end){", "signature": "private int parseEndOfLine(String headerPart,int end){", "docstring": "Parse the header part starting from the given end position and return the index of the enter sequence. "}
{"question_id": "636766f61a6d9265ec017701", "input": "/**Find the last index of the searchStr in str, and return INDEXNOTFOUND if str is empty.**/\npublic static int lastIndexOf(String str,String searchStr){", "signature": "public static int lastIndexOf(String str,String searchStr){", "docstring": "Find the last index of the searchStr in str, and return INDEXNOTFOUND if str is empty."}
{"question_id": "6367670b1a6d9265ec0179fe", "input": "/**Write the given byte array b into the output stream that this class represents.**/\n@Override public void write(byte b[]) throws IOException {", "signature": "@Override public void write(byte b[]) throws IOException {", "docstring": "Write the given byte array b into the output stream that this class represents."}
{"question_id": "636767df1a6d9265ec01873c", "input": "/**Return the id by concatenating the point and the entity id with id connector.**/\npublic String id(String entityId){", "signature": "public String id(String entityId){", "docstring": "Return the id by concatenating the point and the entity id with id connector."}
{"question_id": "636766f91a6d9265ec01777f", "input": "/**Convert a Boolean to a boolean handling null by returning false.**/\npublic static boolean toBoolean(Boolean bool){", "signature": "public static boolean toBoolean(Boolean bool){", "docstring": "Convert a Boolean to a boolean handling null by returning false."}
{"question_id": "6367675f1a6d9265ec0180d3", "input": "/**Compute and return an identity automorphism for the given graph.**/\npublic static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){", "signature": "public static <V,E>IsomorphicGraphMapping<V,E> identity(Graph<V,E> graph){", "docstring": "Compute and return an identity automorphism for the given graph."}
{"question_id": "636766fe1a6d9265ec017833", "input": "/**Delete the file or the whole directory when exiting.**/\npublic static void forceDeleteOnExit(File file) throws IOException {", "signature": "public static void forceDeleteOnExit(File file) throws IOException {", "docstring": "Delete the file or the whole directory when exiting."}
{"question_id": "636767791a6d9265ec018257", "input": "/**Add a log record message to be displayed in the LogTable, with the SwingUtilities.**/\npublic void addMessage(final LogRecord lr){", "signature": "public void addMessage(final LogRecord lr){", "docstring": "Add a log record message to be displayed in the LogTable, with the SwingUtilities."}
{"question_id": "636767641a6d9265ec01817d", "input": "/**Construct a complete bipartite graph from partitions A and B.**/\n@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){", "signature": "@Override public void generateGraph(Graph<V,E> target,Map<String,V> resultMap){", "docstring": "Construct a complete bipartite graph from partitions A and B."}
{"question_id": "636766ff1a6d9265ec017851", "input": "/**Searche for a byte of the specified value in the buffer, starting at the specified position.**/\nprotected int findByte(byte value,int pos){", "signature": "protected int findByte(byte value,int pos){", "docstring": "Searche for a byte of the specified value in the buffer, starting at the specified position."}
{"question_id": "636767a41a6d9265ec018582", "input": "/**Use ProtobufOutput and the LinkedBuffer to write the message into the given OutputStream out, and return the message size.**/\npublic static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {", "signature": "public static <T>int writeDelimitedTo(OutputStream out,T message,Schema<T> schema,LinkedBuffer buffer) throws IOException {", "docstring": "Use ProtobufOutput and the LinkedBuffer to write the message into the given OutputStream out, and return the message size."}
{"question_id": "636767001a6d9265ec01787e", "input": "/**Return the string built by this string builder.**/\npublic String toString(){", "signature": "public String toString(){", "docstring": "Return the string built by this string builder."}
{"question_id": "636767781a6d9265ec01823d", "input": "/**Write the message in the event into a temp file.**/\nprotected void subAppend(LoggingEvent event){", "signature": "protected void subAppend(LoggingEvent event){", "docstring": "Write the message in the event into a temp file."}
{"question_id": "636766ef1a6d9265ec01761a", "input": "/**Add a new type entry of the given value into the type table of this symbol table. Does nothing if the type table already contains a similar type. Return the index of the type entry in the symbol table.**/\nint addType(final String value){", "signature": "int addType(final String value){", "docstring": "Add a new type entry of the given value into the type table of this symbol table. Does nothing if the type table already contains a similar type. Return the index of the type entry in the symbol table."}
{"question_id": "636766821a6d9265ec0174b6", "input": "/**Resolve and return the arguments for the genericType using the type variable information for the targetType. Returns null if  genericType is not parameterized or if arguments cannot be resolved.**/\npublic static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){", "signature": "public static Class<?>[] resolveArguments(Type genericType,Class<?> targetType){", "docstring": "Resolve and return the arguments for the genericType using the type variable information for the targetType. Returns null if  genericType is not parameterized or if arguments cannot be resolved."}
{"question_id": "636767e11a6d9265ec018781", "input": "/**Accept the data into the buffer if its id does not exist in the buffer. Otherwise try to combine it with the existing value, and remove it if the combined is abandoned.**/\n@Override public void accept(final METRICS data){", "signature": "@Override public void accept(final METRICS data){", "docstring": "Accept the data into the buffer if its id does not exist in the buffer. Otherwise try to combine it with the existing value, and remove it if the combined is abandoned."}
{"question_id": "636767531a6d9265ec017efb", "input": "/**Insert this bucket in the data structure before the given bucket.**/\nvoid insertBefore(Bucket bucket){", "signature": "void insertBefore(Bucket bucket){", "docstring": "Insert this bucket in the data structure before the given bucket."}
{"question_id": "636766f11a6d9265ec017641", "input": "/**Check the available space of this InputStream according to the index.**/\n@Override public int available() throws IOException {", "signature": "@Override public int available() throws IOException {", "docstring": "Check the available space of this InputStream according to the index."}
{"question_id": "636767de1a6d9265ec018706", "input": "/**Return mappings with fields that do not exist in the input mappings. The input mappings should be history mapping from the current index.**/\npublic Mappings diffStructure(String tableName,Mappings mappings){", "signature": "public Mappings diffStructure(String tableName,Mappings mappings){", "docstring": "Return mappings with fields that do not exist in the input mappings. The input mappings should be history mapping from the current index."}
{"question_id": "636767dd1a6d9265ec0186e5", "input": "/**Add the given target channels to the consumeTargets.**/\npublic void addNewTarget(Channels channels,IConsumer consumer){", "signature": "public void addNewTarget(Channels channels,IConsumer consumer){", "docstring": "Add the given target channels to the consumeTargets."}
{"question_id": "636767871a6d9265ec01846d", "input": "/**Create the \"lf5\" directory in the Documents and Settings directory on Windows machines, or the user.home variable points on all other platforms.**/\npublic static void createConfigurationDirectory(){", "signature": "public static void createConfigurationDirectory(){", "docstring": "Create the \"lf5\" directory in the Documents and Settings directory on Windows machines, or the user.home variable points on all other platforms."}
{"question_id": "636766f81a6d9265ec01775b", "input": "/**Read a signed long value.**/\npublic long readLong(final int offset){", "signature": "public long readLong(final int offset){", "docstring": "Read a signed long value."}
{"question_id": "636767a51a6d9265ec01859d", "input": "/**Return true if the contents of the internal array bytes and the provided array data match.**/\npublic boolean equals(final byte[] data,int offset,final int len){", "signature": "public boolean equals(final byte[] data,int offset,final int len){", "docstring": "Return true if the contents of the internal array bytes and the provided array data match."}
{"question_id": "6367670b1a6d9265ec0179ff", "input": "/**Return an EMPTY_BYTE_OBJECT_ARRAY array for a null or empty input array.**/\npublic static Byte[] nullToEmpty(final Byte[] array){", "signature": "public static Byte[] nullToEmpty(final Byte[] array){", "docstring": "Return an EMPTY_BYTE_OBJECT_ARRAY array for a null or empty input array."}
{"question_id": "6367677f1a6d9265ec018347", "input": "/**Send a message to each of the connections in telnet-friendly output. **/\npublic synchronized void send(final String message){", "signature": "public synchronized void send(final String message){", "docstring": "Send a message to each of the connections in telnet-friendly output. "}
{"question_id": "636767921a6d9265ec0184cd", "input": "/**Encode all bytes from the specified byte array into a newly-allocated byte array using the encode0 method. The returned bytearray is of the length of the resulting bytes.**/\npublic byte[] encode(byte[] src){", "signature": "public byte[] encode(byte[] src){", "docstring": "Encode all bytes from the specified byte array into a newly-allocated byte array using the encode0 method. The returned bytearray is of the length of the resulting bytes."}
{"question_id": "6367670a1a6d9265ec0179e8", "input": "/**Return an EMPTY_BOOLEAN_OBJECT_ARRAY array for a null or empty input array.**/\npublic static Boolean[] nullToEmpty(final Boolean[] array){", "signature": "public static Boolean[] nullToEmpty(final Boolean[] array){", "docstring": "Return an EMPTY_BOOLEAN_OBJECT_ARRAY array for a null or empty input array."}
{"question_id": "6367677f1a6d9265ec01834b", "input": "/**Place a  LoggingEvent in the buffer buf.**/\npublic void put(LoggingEvent o){", "signature": "public void put(LoggingEvent o){", "docstring": "Place a  LoggingEvent in the buffer buf."}
{"question_id": "636767df1a6d9265ec018744", "input": "/**Split time ranges to insure the start time and end time is small than FETCH_DATA_DURATION.**/\nprotected List<TimeRange> buildTimeRanges(long start,long end){", "signature": "protected List<TimeRange> buildTimeRanges(long start,long end){", "docstring": "Split time ranges to insure the start time and end time is small than FETCH_DATA_DURATION."}
{"question_id": "636767031a6d9265ec0178e6", "input": "/**Convert an array of object Bytes to primitives, return null for a null input array.**/\npublic static byte[] toPrimitive(final Byte[] array){", "signature": "public static byte[] toPrimitive(final Byte[] array){", "docstring": "Convert an array of object Bytes to primitives, return null for a null input array."}
{"question_id": "636767dc1a6d9265ec0186be", "input": "/**Follow the dayStep to reformat the time bucket with TIME_BUCKET_FORMATTER. For example, if dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123.**/\nstatic long compressTimeBucket(long timeBucket,int dayStep){", "signature": "static long compressTimeBucket(long timeBucket,int dayStep){", "docstring": "Follow the dayStep to reformat the time bucket with TIME_BUCKET_FORMATTER. For example, if dayStep == 11, 20000105 re-formatted time bucket is 20000101, 20000115 re-formatted time bucket is 20000112, 20000123 re-formatted time bucket is 20000123."}
{"question_id": "636767a41a6d9265ec01856c", "input": "/**Compute the size of the utf8 string beginning at the specified  index  with the specified length.**/\npublic static int computeUTF8Size(final CharSequence str,final int index,final int len){", "signature": "public static int computeUTF8Size(final CharSequence str,final int index,final int len){", "docstring": "Compute the size of the utf8 string beginning at the specified  index  with the specified length."}
{"question_id": "636766f01a6d9265ec017639", "input": "/**Convert an array to list, return empty list for null array.**/\npublic static <T>List<T> asList(T[] a){", "signature": "public static <T>List<T> asList(T[] a){", "docstring": "Convert an array to list, return empty list for null array."}
{"question_id": "6367672d1a6d9265ec017c74", "input": "/**Remove a value from the values if the map keys contains the val. Returns true if actually removed, and false otherwise.**/\npublic boolean remove(int val){", "signature": "public boolean remove(int val){", "docstring": "Remove a value from the values if the map keys contains the val. Returns true if actually removed, and false otherwise."}
{"question_id": "6367676b1a6d9265ec0181df", "input": "/**Return true if the given string starts with the specified case-insensitive prefix, false otherwise.**/\npublic static boolean startsWithIgnoreCase(String str,String prefix){", "signature": "public static boolean startsWithIgnoreCase(String str,String prefix){", "docstring": "Return true if the given string starts with the specified case-insensitive prefix, false otherwise."}
{"question_id": "6367674b1a6d9265ec017dc0", "input": "/**Compute all vertices by iterating over the edges of this graph.**/\nprivate Set<V> initVisibleVertices(){", "signature": "private Set<V> initVisibleVertices(){", "docstring": "Compute all vertices by iterating over the edges of this graph."}
{"question_id": "636767001a6d9265ec017873", "input": "/**Reverse the given String as per.**/\npublic static String reverse(final String str){", "signature": "public static String reverse(final String str){", "docstring": "Reverse the given String as per."}
{"question_id": "636766ff1a6d9265ec01783b", "input": "/**Get a substring from the specified String avoiding exceptions. **/\npublic static String sub(String str,int start,int end){", "signature": "public static String sub(String str,int start,int end){", "docstring": "Get a substring from the specified String avoiding exceptions. "}
{"question_id": "6367671a1a6d9265ec017c15", "input": "/**Put an array of bytes into this byte vector, enlarge the byte vector automatically if necessary.**/\npublic ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){", "signature": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){", "docstring": "Put an array of bytes into this byte vector, enlarge the byte vector automatically if necessary."}
{"question_id": "636766821a6d9265ec0174d2", "input": "/**Wrap an HttpServletRequest with the Builder.**/\npublic static AtmosphereRequest wrap(HttpServletRequest request){", "signature": "public static AtmosphereRequest wrap(HttpServletRequest request){", "docstring": "Wrap an HttpServletRequest with the Builder."}
{"question_id": "636767ab1a6d9265ec01867b", "input": "/**Write the utf8-encoded bytes from the string into the LinkedBuffer.**/\npublic static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){", "signature": "public static LinkedBuffer writeUTF8(final CharSequence str,final WriteSession session,final LinkedBuffer lb){", "docstring": "Write the utf8-encoded bytes from the string into the LinkedBuffer."}
{"question_id": "6367675c1a6d9265ec01805b", "input": "/**Remove this edge from both doubly linked lists of the tree edges.**/\npublic void removeFromTreeEdgeList(){", "signature": "public void removeFromTreeEdgeList(){", "docstring": "Remove this edge from both doubly linked lists of the tree edges."}
{"question_id": "636767791a6d9265ec01826d", "input": "/**Find the value corresponding to key in props, then perform variable substitution on the found value. Return the substitution result, or the value in case of exception. **/\npublic static String findAndSubst(String key,Properties props){", "signature": "public static String findAndSubst(String key,Properties props){", "docstring": "Find the value corresponding to key in props, then perform variable substitution on the found value. Return the substitution result, or the value in case of exception. "}
{"question_id": "636767001a6d9265ec01787f", "input": "/**Append the detail of an int array to the buffer, starting with arrayStart and ending with arrayEnd, and separating with arraySeparator.**/\nprotected void appendDetail(StringBuffer buffer,String fieldName,int[] array){", "signature": "protected void appendDetail(StringBuffer buffer,String fieldName,int[] array){", "docstring": "Append the detail of an int array to the buffer, starting with arrayStart and ending with arrayEnd, and separating with arraySeparator."}
{"question_id": "636766fe1a6d9265ec017834", "input": "/**Return the servlet session id**/\npublic static String sessionId(){", "signature": "public static String sessionId(){", "docstring": "Return the servlet session id"}
{"question_id": "636766ff1a6d9265ec01784b", "input": "/**Check whether a character string is a dight. If yes, true is returned. Otherwise, false is returned.**/\npublic static boolean isDigits(String str){", "signature": "public static boolean isDigits(String str){", "docstring": "Check whether a character string is a dight. If yes, true is returned. Otherwise, false is returned."}
{"question_id": "636766fc1a6d9265ec0177da", "input": "/**Check whether a character is a parameter separator. If yes, true is returned. Otherwise, false is returned.**/\nprivate static boolean isParameterSeparator(final char c){", "signature": "private static boolean isParameterSeparator(final char c){", "docstring": "Check whether a character is a parameter separator. If yes, true is returned. Otherwise, false is returned."}
{"question_id": "6367670c1a6d9265ec017a35", "input": "/**Determines whether a character string ends with a specified suffix.**/\nprivate static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){", "signature": "private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){", "docstring": "Determines whether a character string ends with a specified suffix."}
{"question_id": "6367667f1a6d9265ec01745d", "input": "/**Decode the raw path.**/\npublic static List<PathSegmentImpl> decodePath(URI u,boolean decode){", "signature": "public static List<PathSegmentImpl> decodePath(URI u,boolean decode){", "docstring": "Decode the raw path."}
{"question_id": "636766f11a6d9265ec017651", "input": "/**If array is null or its length is 0, convert array to EMPTY_CHARACTER_OBJECT_ARRAY. Otherwise, return array itself.**/\npublic static Character[] nullToEmpty(final Character[] array){", "signature": "public static Character[] nullToEmpty(final Character[] array){", "docstring": "If array is null or its length is 0, convert array to EMPTY_CHARACTER_OBJECT_ARRAY. Otherwise, return array itself."}
{"question_id": "636767821a6d9265ec0183ab", "input": "/**Check whether there is a thrown**/\npublic boolean hasThrown(){", "signature": "public boolean hasThrown(){", "docstring": "Check whether there is a thrown"}
{"question_id": "636767831a6d9265ec0183c9", "input": "/**Return the value at the top of the stack**/\npublic static String peek(){", "signature": "public static String peek(){", "docstring": "Return the value at the top of the stack"}
{"question_id": "636767de1a6d9265ec01871c", "input": "/**Add the value to the original value of the key.**/\npublic void valueAccumulation(String key,Long value){", "signature": "public void valueAccumulation(String key,Long value){", "docstring": "Add the value to the original value of the key."}
{"question_id": "636766811a6d9265ec017496", "input": "/**If the stack is not empty, the last element of the stack is returned. Otherwise, null is returned.**/\npublic InputStream next() throws IOException {", "signature": "public InputStream next() throws IOException {", "docstring": "If the stack is not empty, the last element of the stack is returned. Otherwise, null is returned."}
{"question_id": "6367677e1a6d9265ec01832e", "input": "/**Check if the named logger exists. If so return its reference, otherwise returns null.**/\npublic Logger exists(String name){", "signature": "public Logger exists(String name){", "docstring": "Check if the named logger exists. If so return its reference, otherwise returns null."}
{"question_id": "6367670a1a6d9265ec0179e7", "input": "/**Check whether the specified converter exists in converters. If yes, converter is returned. If no, null is returned.**/\npublic Converter lookup(final Class<?> clazz){", "signature": "public Converter lookup(final Class<?> clazz){", "docstring": "Check whether the specified converter exists in converters. If yes, converter is returned. If no, null is returned."}
{"question_id": "636767a41a6d9265ec018572", "input": "/**Read raw varint**/\npublic long readRawVarint64() throws IOException {", "signature": "public long readRawVarint64() throws IOException {", "docstring": "Read raw varint"}
{"question_id": "636767021a6d9265ec0178bb", "input": "/**If the double type array is null or its length is 0, convert array to EMPTY_CHARACTER_OBJECT_ARRAY. Otherwise, return array itself.**/\npublic static Double[] nullToEmpty(final Double[] array){", "signature": "public static Double[] nullToEmpty(final Double[] array){", "docstring": "If the double type array is null or its length is 0, convert array to EMPTY_CHARACTER_OBJECT_ARRAY. Otherwise, return array itself."}
{"question_id": "636767021a6d9265ec0178b2", "input": "/**Pop the various value according to the first character of the descriptor.**/\nprivate void pop(final String descriptor){", "signature": "private void pop(final String descriptor){", "docstring": "Pop the various value according to the first character of the descriptor."}
{"question_id": "636766f91a6d9265ec01776e", "input": "/**Write bytes of length len from a byte array**/\n@Override public void write(final byte b[],final int off,final int len) throws IOException {", "signature": "@Override public void write(final byte b[],final int off,final int len) throws IOException {", "docstring": "Write bytes of length len from a byte array"}
{"question_id": "636767551a6d9265ec017f3f", "input": "/**Swap values at indexes i and j in arr**/\npublic static final <V>void swap(V[] arr,int i,int j){", "signature": "public static final <V>void swap(V[] arr,int i,int j){", "docstring": "Swap values at indexes i and j in arr"}
{"question_id": "636766ae1a6d9265ec0175dc", "input": "/**Determine whether the actual response is a Partial Content**/\npublic Boolean isPartialContentResponse(){", "signature": "public Boolean isPartialContentResponse(){", "docstring": "Determine whether the actual response is a Partial Content"}
{"question_id": "636766f01a6d9265ec01762e", "input": "/**Check whether the array of the double type is empty.**/\npublic static boolean isEmpty(final double[] array){", "signature": "public static boolean isEmpty(final double[] array){", "docstring": "Check whether the array of the double type is empty."}
{"question_id": "6367667e1a6d9265ec01743a", "input": "/**Check whether lastwrite is - 1. If yes, return - 1. Otherwise, return System.currentTimeMillis().**/\npublic long lastWriteTimeStampInMilliseconds(){", "signature": "public long lastWriteTimeStampInMilliseconds(){", "docstring": "Check whether lastwrite is - 1. If yes, return - 1. Otherwise, return System.currentTimeMillis()."}
{"question_id": "636767601a6d9265ec0180fd", "input": "/**Add an edge whose start point is sourceVertex and end point is targetVertex to touchingVerticesToEdgeMap.**/\nprotected void addToIndex(V sourceVertex,V targetVertex,E e){", "signature": "protected void addToIndex(V sourceVertex,V targetVertex,E e){", "docstring": "Add an edge whose start point is sourceVertex and end point is targetVertex to touchingVerticesToEdgeMap."}
{"question_id": "636766821a6d9265ec0174c9", "input": "/**Creates an array of the file type based on all file names in java.class.path and returns the array.**/\nprivate static File[] classPath(){", "signature": "private static File[] classPath(){", "docstring": "Creates an array of the file type based on all file names in java.class.path and returns the array."}
{"question_id": "636767041a6d9265ec0178f8", "input": "/**Copy the source string and transfer each character to lowecase.**/\nprivate static String[] copyStrings(final String[] src){", "signature": "private static String[] copyStrings(final String[] src){", "docstring": "Copy the source string and transfer each character to lowecase."}
{"question_id": "636767521a6d9265ec017ecc", "input": "/**Divide a box into two equal boxes on the x axis.**/\npublic static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){", "signature": "public static Pair<Box2D,Box2D> splitAlongXAxis(Box2D box){", "docstring": "Divide a box into two equal boxes on the x axis."}
{"question_id": "636766a91a6d9265ec0175c1", "input": "/**Convert the original data array to a longer array.**/\nprivate void enlarge(final int size){", "signature": "private void enlarge(final int size){", "docstring": "Convert the original data array to a longer array."}
{"question_id": "636767781a6d9265ec018238", "input": "/**Check whether appender elements exist in appenderList. If yes, true is returned. Otherwise, false is returned.**/\npublic boolean isAttached(Appender appender){", "signature": "public boolean isAttached(Appender appender){", "docstring": "Check whether appender elements exist in appenderList. If yes, true is returned. Otherwise, false is returned."}
{"question_id": "6367674a1a6d9265ec017dab", "input": "/**Compares two values. If the difference between the two values is less than epsilon, 0 is returned. Otherwise, Double.compare is invoked.**/\n@Override public int compare(Double o1,Double o2){", "signature": "@Override public int compare(Double o1,Double o2){", "docstring": "Compares two values. If the difference between the two values is less than epsilon, 0 is returned. Otherwise, Double.compare is invoked."}
{"question_id": "6367672d1a6d9265ec017c78", "input": "/**If the key whose value is val does not exist in the map, add (val, val) to the map and return true. Otherwise, return false.**/\npublic boolean insert(int val){", "signature": "public boolean insert(int val){", "docstring": "If the key whose value is val does not exist in the map, add (val, val) to the map and return true. Otherwise, return false."}
{"question_id": "636767dc1a6d9265ec0186c6", "input": "/**Check whether all fields exist in properties.**/\nprivate boolean containsAllFields(Fields fields){", "signature": "private boolean containsAllFields(Fields fields){", "docstring": "Check whether all fields exist in properties."}
{"question_id": "636766621a6d9265ec0173a1", "input": "/**Converts data to an array of the byte type.**/\npublic byte[] extract(){", "signature": "public byte[] extract(){", "docstring": "Converts data to an array of the byte type."}
{"question_id": "636766821a6d9265ec0174bf", "input": "/**Converts a name of the string type to a character array and converts the first letter to an uppercase letter.**/\npublic static String capitalize(String name){", "signature": "public static String capitalize(String name){", "docstring": "Converts a name of the string type to a character array and converts the first letter to an uppercase letter."}
{"question_id": "636767aa1a6d9265ec01865a", "input": "/**Write the content into the LinkedBuffer.**/\npublic static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {", "signature": "public static int writeTo(final DataOutput out,LinkedBuffer node) throws IOException {", "docstring": "Write the content into the LinkedBuffer."}
{"question_id": "636766f21a6d9265ec017677", "input": "/**Check whether the parameter bool is not true.**/\npublic static boolean isNotTrue(Boolean bool){", "signature": "public static boolean isNotTrue(Boolean bool){", "docstring": "Check whether the parameter bool is not true."}
{"question_id": "6367674f1a6d9265ec017e74", "input": "/**Convert a value in a vs array to a string**/\npublic String toString(){", "signature": "public String toString(){", "docstring": "Convert a value in a vs array to a string"}
{"question_id": "6367675c1a6d9265ec018058", "input": "/**Create a string supplier which returns unique integer strings starting from the given start.**/\n@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){", "signature": "@SuppressWarnings(\"unchecked\") public static Supplier<String> createStringSupplier(int start){", "docstring": "Create a string supplier which returns unique integer strings starting from the given start."}
{"question_id": "6367677b1a6d9265ec0182bd", "input": "/**Formats LoggingEvent as a fixed-format string**/\npublic String format(final LoggingEvent event){", "signature": "public String format(final LoggingEvent event){", "docstring": "Formats LoggingEvent as a fixed-format string"}
{"question_id": "636766ff1a6d9265ec017842", "input": "/**If the length of the array is 0, return EMPTY_DOUBLE_ARAY. Otherwise, convert the array to an array of the double type.**/\npublic static double[] toPrimitive(final Double[] array){", "signature": "public static double[] toPrimitive(final Double[] array){", "docstring": "If the length of the array is 0, return EMPTY_DOUBLE_ARAY. Otherwise, convert the array to an array of the double type."}
{"question_id": "636766fa1a6d9265ec0177a9", "input": "/**Add abstractType to the initializations variable.**/\nprivate void addInitializedType(final int abstractType){", "signature": "private void addInitializedType(final int abstractType){", "docstring": "Add abstractType to the initializations variable."}
{"question_id": "6367670a1a6d9265ec0179dc", "input": "/**Add the elements indexed from start to end in currentFrame to Frame.**/\nprivate void putAbstractTypes(final int start,final int end){", "signature": "private void putAbstractTypes(final int start,final int end){", "docstring": "Add the elements indexed from start to end in currentFrame to Frame."}
{"question_id": "636766801a6d9265ec017482", "input": "/**Read from the buffer.**/\npublic void readFrom(final InputStream in) throws IOException {", "signature": "public void readFrom(final InputStream in) throws IOException {", "docstring": "Read from the buffer."}
{"question_id": "6367670a1a6d9265ec0179d8", "input": "/**Write the byte array b to the buffer based on the encoding.**/\n@Override public void write(final byte[] b) throws IOException {", "signature": "@Override public void write(final byte[] b) throws IOException {", "docstring": "Write the byte array b to the buffer based on the encoding."}
{"question_id": "636766a81a6d9265ec01757b", "input": "/**Converts the content in JSONWriter to a string.**/\n@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){", "signature": "@SuppressWarnings(\"unchecked\") public String toString(JSONWriter.Feature... features){", "docstring": "Converts the content in JSONWriter to a string."}
{"question_id": "636767021a6d9265ec0178bf", "input": "/**If the length of the value string is 0, the default type is returned. Otherwise, the element at the first position of the string is returned.**/\n@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {", "signature": "@Override protected Object convertToType(final Class<?> type,final Object value) throws Exception {", "docstring": "If the length of the value string is 0, the default type is returned. Otherwise, the element at the first position of the string is returned."}
{"question_id": "6367670b1a6d9265ec017a0f", "input": "/**Check whether str contains elements in searchStrArray. If yes, true is returned. If no, false is returned.**/\npublic static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){", "signature": "public static boolean containsAnyIgnoreCase(String str,List<String> searchStrArray){", "docstring": "Check whether str contains elements in searchStrArray. If yes, true is returned. If no, false is returned."}
{"question_id": "636766a81a6d9265ec01758e", "input": "/**Returns the element at the location specified by desiredCapacity in primeCapacities.**/\npublic static int nextPrime(int desiredCapacity){", "signature": "public static int nextPrime(int desiredCapacity){", "docstring": "Returns the element at the location specified by desiredCapacity in primeCapacities."}
{"question_id": "6367670a1a6d9265ec0179cf", "input": "/**Obtains the character value of ch. If ch is null, defaultValue is returned.**/\npublic static char toChar(final Character ch,final char defaultValue){", "signature": "public static char toChar(final Character ch,final char defaultValue){", "docstring": "Obtains the character value of ch. If ch is null, defaultValue is returned."}
{"question_id": "6367676b1a6d9265ec0181e2", "input": "/**Returns the first element in candidates that matches the source.**/\npublic static Object findFirstMatch(Collection source,Collection candidates){", "signature": "public static Object findFirstMatch(Collection source,Collection candidates){", "docstring": "Returns the first element in candidates that matches the source."}
{"question_id": "6367676b1a6d9265ec0181ee", "input": "/**Trim the end space of the str.**/\npublic static String trimTrailingWhitespace(String str){", "signature": "public static String trimTrailingWhitespace(String str){", "docstring": "Trim the end space of the str."}
{"question_id": "636767dc1a6d9265ec0186cb", "input": "/**Initializes a directory.**/\npublic void init(){", "signature": "public void init(){", "docstring": "Initializes a directory."}
{"question_id": "636767a31a6d9265ec018552", "input": "/**Read string from a buffer.**/\n@Override public String readString() throws IOException {", "signature": "@Override public String readString() throws IOException {", "docstring": "Read string from a buffer."}
{"question_id": "636767a61a6d9265ec0185b7", "input": "/**Obtains the number corresponding to the character c.**/\nprivate static int digitValue(final char c){", "signature": "private static int digitValue(final char c){", "docstring": "Obtains the number corresponding to the character c."}
{"question_id": "636767e01a6d9265ec018755", "input": "/**Put the \"content\" from the  jsonObject to the content.**/\nprivate Map<String,Object> buildContent(JsonObject jsonObject){", "signature": "private Map<String,Object> buildContent(JsonObject jsonObject){", "docstring": "Put the \"content\" from the  jsonObject to the content."}
{"question_id": "6367667f1a6d9265ec017458", "input": "/**Remove the mapping from atmosphereHandlers.**/\npublic AtmosphereFramework removeAtmosphereHandler(String mapping){", "signature": "public AtmosphereFramework removeAtmosphereHandler(String mapping){", "docstring": "Remove the mapping from atmosphereHandlers."}
{"question_id": "636767a21a6d9265ec018517", "input": "/**Copy bytes from LinkedBuffer and return.**/\npublic final byte[] toByteArray(){", "signature": "public final byte[] toByteArray(){", "docstring": "Copy bytes from LinkedBuffer and return."}
{"question_id": "6367667d1a6d9265ec017401", "input": "/**Unescapes Java that found in the String.**/\npublic static String unescapeJava(String str) throws Exception {", "signature": "public static String unescapeJava(String str) throws Exception {", "docstring": "Unescapes Java that found in the String."}
{"question_id": "636766f01a6d9265ec01763e", "input": "/**Translate a MIME standard charset name into the Java equivalent.**/\nprivate static String javaCharset(String charset){", "signature": "private static String javaCharset(String charset){", "docstring": "Translate a MIME standard charset name into the Java equivalent."}
{"question_id": "6367676a1a6d9265ec0181bf", "input": "/**Check whether an obj variable is of the String type.**/\npublic static Object quoteIfString(Object obj){", "signature": "public static Object quoteIfString(Object obj){", "docstring": "Check whether an obj variable is of the String type."}
{"question_id": "636767501a6d9265ec017e86", "input": "/**Returns the previous ListNode.**/\n@Override public ListNode<E> previousNode(){", "signature": "@Override public ListNode<E> previousNode(){", "docstring": "Returns the previous ListNode."}
{"question_id": "636766f21a6d9265ec017667", "input": "/**Read a short value from classFileBuffer**/\npublic short readShort(final int offset){", "signature": "public short readShort(final int offset){", "docstring": "Read a short value from classFileBuffer"}
{"question_id": "636767031a6d9265ec0178ef", "input": "/**Copy the given array and add a default value at the end.**/\nprivate static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){", "signature": "private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){", "docstring": "Copy the given array and add a default value at the end."}
{"question_id": "636767431a6d9265ec017c8d", "input": "/**Calculate the floor of the logarithmic value of the given value in base 2.**/\nprivate int computeBinaryLog(int n){", "signature": "private int computeBinaryLog(int n){", "docstring": "Calculate the floor of the logarithmic value of the given value in base 2."}
{"question_id": "636767611a6d9265ec018116", "input": "/**Return the intersection between two sets.**/\nprivate Set<V> intersection(Set<V> set1,Set<V> set2){", "signature": "private Set<V> intersection(Set<V> set1,Set<V> set2){", "docstring": "Return the intersection between two sets."}
{"question_id": "636766f71a6d9265ec017730", "input": "/**If collection is null, convert collection to EMPTY_STRING_ARRAY. Otherwise, convert collection to an array of strings and return the array. ???**/\nstatic String[] toNoNullStringArray(Collection<?> collection){", "signature": "static String[] toNoNullStringArray(Collection<?> collection){", "docstring": "If collection is null, convert collection to EMPTY_STRING_ARRAY. Otherwise, convert collection to an array of strings and return the array. ???"}
{"question_id": "636767081a6d9265ec0179a2", "input": "/**Check whether a character string is all consist of zero. **/\nprivate static boolean isAllZeros(String s){", "signature": "private static boolean isAllZeros(String s){", "docstring": "Check whether a character string is all consist of zero. "}
{"question_id": "636766821a6d9265ec0174b3", "input": "/**Filter and return null for the null and abort message in BroadcastAction, return the action message otherwise. **/\nprotected Object filter(Object msg){", "signature": "protected Object filter(Object msg){", "docstring": "Filter and return null for the null and abort message in BroadcastAction, return the action message otherwise. "}
{"question_id": "636767e01a6d9265ec018764", "input": "/**Convert process properties to the JsonObject.**/\nprivate JsonObject convertProperties(List<KeyStringValuePair> properties){", "signature": "private JsonObject convertProperties(List<KeyStringValuePair> properties){", "docstring": "Convert process properties to the JsonObject."}
{"question_id": "6367677e1a6d9265ec018314", "input": "/**Remove any inactive nodes from the Category tree and return the number of removed nodes.**/\nprotected int removeUnusedNodes(){", "signature": "protected int removeUnusedNodes(){", "docstring": "Remove any inactive nodes from the Category tree and return the number of removed nodes."}
{"question_id": "636766ff1a6d9265ec017853", "input": "/**Return the label by the given bytecode offset if it has been created. Otherwise, creat a new label and return it.**/\nprotected Label readLabel(final int bytecodeOffset,final Label[] labels){", "signature": "protected Label readLabel(final int bytecodeOffset,final Label[] labels){", "docstring": "Return the label by the given bytecode offset if it has been created. Otherwise, creat a new label and return it."}
{"question_id": "6367677d1a6d9265ec0182fd", "input": "/**Check whether a string is true or false after ignore cases and trim the whitespaces at both ends. If so, its boolean value is returned. Otherwise, dEfault is returned.**/\npublic static boolean toBoolean(String value,boolean dEfault){", "signature": "public static boolean toBoolean(String value,boolean dEfault){", "docstring": "Check whether a string is true or false after ignore cases and trim the whitespaces at both ends. If so, its boolean value is returned. Otherwise, dEfault is returned."}
{"question_id": "6367676a1a6d9265ec0181cd", "input": "/**Trim the leading whitespaces in a string.**/\npublic static String trimLeadingWhitespace(String str){", "signature": "public static String trimLeadingWhitespace(String str){", "docstring": "Trim the leading whitespaces in a string."}
{"question_id": "636766fe1a6d9265ec01782a", "input": "/**Read a CONSTANT_Utf8 constant pool entry in the classFileBuffer.**/\nfinal String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){", "signature": "final String readUtf(final int constantPoolEntryIndex,final char[] charBuffer){", "docstring": "Read a CONSTANT_Utf8 constant pool entry in the classFileBuffer."}
{"question_id": "636766851a6d9265ec01751b", "input": "/**Convert a hexadecimal number to binary and return its character type.**/\nprivate static char decodeHexNibble(final char c){", "signature": "private static char decodeHexNibble(final char c){", "docstring": "Convert a hexadecimal number to binary and return its character type."}
{"question_id": "636766f21a6d9265ec01767d", "input": "/**Convert object to string  if the object is not null. Otherwise, null is returned.**/\npublic static String toString(Object object){", "signature": "public static String toString(Object object){", "docstring": "Convert object to string  if the object is not null. Otherwise, null is returned."}
{"question_id": "636767581a6d9265ec017fc4", "input": "/**Calculate the factorial of the given number.**/\npublic static long factorial(int n){", "signature": "public static long factorial(int n){", "docstring": "Calculate the factorial of the given number."}
{"question_id": "636767511a6d9265ec017eb6", "input": "/**Find a circulator to the node that satisfies the Interface predicate.**/\nprivate OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){", "signature": "private OuterFaceCirculator selectOnOuterFace(Predicate<Node> predicate,Node start,Node stop,int dir){", "docstring": "Find a circulator to the node that satisfies the Interface predicate."}
{"question_id": "636767841a6d9265ec0183e8", "input": "/**Add an event as the last event in the buffer.**/\npublic void add(LoggingEvent event){", "signature": "public void add(LoggingEvent event){", "docstring": "Add an event as the last event in the buffer."}
{"question_id": "636767a41a6d9265ec01857e", "input": "/**Compare two numbers.**/\nprivate static int compareSigned(long a,long b){", "signature": "private static int compareSigned(long a,long b){", "docstring": "Compare two numbers."}
{"question_id": "636767691a6d9265ec0181ae", "input": "/**Convert an enumeration to a string array.**/\npublic static String[] toStringArray(Enumeration<String> enumeration){", "signature": "public static String[] toStringArray(Enumeration<String> enumeration){", "docstring": "Convert an enumeration to a string array."}
{"question_id": "636766a91a6d9265ec0175ae", "input": "/**Add a byte array into the byte vector.**/\npublic ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){", "signature": "public ByteVector putByteArray(final byte[] byteArrayValue,final int byteOffset,final int byteLength){", "docstring": "Add a byte array into the byte vector."}
{"question_id": "636766f11a6d9265ec01764f", "input": "/**Return an unmodifiable list that contains all methods in the BeanMap.**/\npublic Collection<Object> values(){", "signature": "public Collection<Object> values(){", "docstring": "Return an unmodifiable list that contains all methods in the BeanMap."}
{"question_id": "636766f81a6d9265ec017758", "input": "/**Compute a hash code according to the type.**/\n@Override public int hashCode(){", "signature": "@Override public int hashCode(){", "docstring": "Compute a hash code according to the type."}
{"question_id": "6367676c1a6d9265ec01820b", "input": "/**Delete characters that exists in the intersection between two character strings of the first character string and return the first character string that is modified.**/\npublic static String deleteAny(String inString,String charsToDelete){", "signature": "public static String deleteAny(String inString,String charsToDelete){", "docstring": "Delete characters that exists in the intersection between two character strings of the first character string and return the first character string that is modified."}
{"question_id": "636766861a6d9265ec01755a", "input": "/**If the match between the url and the pattern occurs, return the match result. Otherwise, return null.**/\npublic final MatchResult match(CharSequence uri){", "signature": "public final MatchResult match(CharSequence uri){", "docstring": "If the match between the url and the pattern occurs, return the match result. Otherwise, return null."}
{"question_id": "636766f91a6d9265ec01777d", "input": "/**Convert an ASCII encoded character to hex.**/\npublic static byte convertHexDigit(byte b){", "signature": "public static byte convertHexDigit(byte b){", "docstring": "Convert an ASCII encoded character to hex."}
{"question_id": "636766801a6d9265ec017477", "input": "/**Add files in the stack in reverse order.**/\nprivate void addReverse(final InputStream[] files){", "signature": "private void addReverse(final InputStream[] files){", "docstring": "Add files in the stack in reverse order."}
{"question_id": "636767de1a6d9265ec01871e", "input": "/**Check whether the key contains null.**/\nprivate void check(String modelName) throws IllegalStateException {", "signature": "private void check(String modelName) throws IllegalStateException {", "docstring": "Check whether the key contains null."}
{"question_id": "636766f81a6d9265ec01774b", "input": "/**Read the next buffer in the buffer.**/\npublic byte readByte() throws IOException {", "signature": "public byte readByte() throws IOException {", "docstring": "Read the next buffer in the buffer."}
{"question_id": "636766851a6d9265ec017515", "input": "/**Suspend the AtmosphereResource based on its transport value.**/\n@Override public Action inspect(AtmosphereResource r){", "signature": "@Override public Action inspect(AtmosphereResource r){", "docstring": "Suspend the AtmosphereResource based on its transport value."}
{"question_id": "636766621a6d9265ec0173a2", "input": "/**Write the rightmost n bits of the given number.**/\npublic void write(int x,int nbits){", "signature": "public void write(int x,int nbits){", "docstring": "Write the rightmost n bits of the given number."}
{"question_id": "636767611a6d9265ec018106", "input": "/**Return the sum of the weights entering a vertex.**/\npublic double vertexWeight(Set<V> v){", "signature": "public double vertexWeight(Set<V> v){", "docstring": "Return the sum of the weights entering a vertex."}
{"question_id": "636767841a6d9265ec0183f2", "input": "/**Compare two events by their timeStamp.**/\npublic int compare(Object aObj1,Object aObj2){", "signature": "public int compare(Object aObj1,Object aObj2){", "docstring": "Compare two events by their timeStamp."}
{"question_id": "636767861a6d9265ec01844c", "input": "/**Remove the appender by the given name from the list of appenders.**/\npublic void removeAppender(String name){", "signature": "public void removeAppender(String name){", "docstring": "Remove the appender by the given name from the list of appenders."}
{"question_id": "636767781a6d9265ec018242", "input": "/**Call the doAppend method on all attached appenders. **/\npublic int appendLoopOnAppenders(LoggingEvent event){", "signature": "public int appendLoopOnAppenders(LoggingEvent event){", "docstring": "Call the doAppend method on all attached appenders. "}
{"question_id": "6367670c1a6d9265ec017a2a", "input": "/**Convert the given Integer array to primitives. Return ArrayUtils.EMPTY_INT_ARRAY for an empty array, return null for null array.**/\npublic static int[] toPrimitive(final Integer[] array){", "signature": "public static int[] toPrimitive(final Integer[] array){", "docstring": "Convert the given Integer array to primitives. Return ArrayUtils.EMPTY_INT_ARRAY for an empty array, return null for null array."}
{"question_id": "636767041a6d9265ec017911", "input": "/**Register the value in REGISTRY if the value is not null.**/\nstatic void register(Object value){", "signature": "static void register(Object value){", "docstring": "Register the value in REGISTRY if the value is not null."}
{"question_id": "636767511a6d9265ec017eb0", "input": "/**Return the number of non-zero entries of a row.**/\npublic int nonZeros(int row){", "signature": "public int nonZeros(int row){", "docstring": "Return the number of non-zero entries of a row."}
{"question_id": "6367676c1a6d9265ec018223", "input": "/**Check whether the element exists in the collection. **/\npublic static boolean containsInstance(Collection collection,Object element){", "signature": "public static boolean containsInstance(Collection collection,Object element){", "docstring": "Check whether the element exists in the collection. "}
{"question_id": "636766fa1a6d9265ec01779d", "input": "/**Check whether the character is ASCII 7 bit control.**/\npublic static boolean isAsciiControl(final char ch){", "signature": "public static boolean isAsciiControl(final char ch){", "docstring": "Check whether the character is ASCII 7 bit control."}
{"question_id": "6367670b1a6d9265ec0179f2", "input": "/**Check whether a map contains a mapping for the specified key.**/\n@Override public boolean containsKey(final Object key){", "signature": "@Override public boolean containsKey(final Object key){", "docstring": "Check whether a map contains a mapping for the specified key."}
{"question_id": "636766fa1a6d9265ec017796", "input": "/**Convert an array of primitive booleans to objects.**/\npublic static Boolean[] toObject(final boolean[] array){", "signature": "public static Boolean[] toObject(final boolean[] array){", "docstring": "Convert an array of primitive booleans to objects."}
{"question_id": "636767aa1a6d9265ec01864a", "input": "/**Copy bytes to a byte array.**/\npublic byte[] toByteArray(){", "signature": "public byte[] toByteArray(){", "docstring": "Copy bytes to a byte array."}
{"question_id": "636767561a6d9265ec017f7c", "input": "/**Convert a set representation to a graph path.**/\nprotected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){", "signature": "protected GraphPath<V,E> edgeSetToTour(Set<E> tour,Graph<V,E> graph){", "docstring": "Convert a set representation to a graph path."}
{"question_id": "636767981a6d9265ec0184e5", "input": "/**Log the arguments of the command line.**/\npublic static void logCommandLineArguments(String[] args){", "signature": "public static void logCommandLineArguments(String[] args){", "docstring": "Log the arguments of the command line."}
{"question_id": "6367670a1a6d9265ec0179f1", "input": "/**Convert an array of primitive shorts to objects.**/\npublic static Short[] toObject(final short[] array){", "signature": "public static Short[] toObject(final short[] array){", "docstring": "Convert an array of primitive shorts to objects."}
{"question_id": "636766fe1a6d9265ec017823", "input": "/**Add constant information generated by its name and type to the constant pool and return the index of the constant.**/\nint addConstantNameAndType(final String name,final String descriptor){", "signature": "int addConstantNameAndType(final String name,final String descriptor){", "docstring": "Add constant information generated by its name and type to the constant pool and return the index of the constant."}
{"question_id": "636767461a6d9265ec017d17", "input": "/**Unescape a dot identifier string.**/\nprivate String unescapeId(String input){", "signature": "private String unescapeId(String input){", "docstring": "Unescape a dot identifier string."}
{"question_id": "6367676c1a6d9265ec018204", "input": "/**Concatenate two string arrays into one.**/\npublic static String[] concatenateStringArrays(String[] array1,String[] array2){", "signature": "public static String[] concatenateStringArrays(String[] array1,String[] array2){", "docstring": "Concatenate two string arrays into one."}
{"question_id": "636767641a6d9265ec018190", "input": "/**Move all vertices from the minimum label bucket to the bucket with label 0 and clear the minimum label bucket.**/\nprivate void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){", "signature": "private void reload(List<Set<Integer>> bucketsByLabel,List<Integer> labels,int minLabel){", "docstring": "Move all vertices from the minimum label bucket to the bucket with label 0 and clear the minimum label bucket."}
{"question_id": "6367676a1a6d9265ec0181d4", "input": "/**Append a string to a string array.**/\npublic static String[] addStringToArray(String[] array,String str){", "signature": "public static String[] addStringToArray(String[] array,String str){", "docstring": "Append a string to a string array."}
{"question_id": "6367676b1a6d9265ec0181dd", "input": "/**Return the frequencies that the substring appears in the string.**/\npublic static int countOccurrencesOf(String str,String sub){", "signature": "public static int countOccurrencesOf(String str,String sub){", "docstring": "Return the frequencies that the substring appears in the string."}
{"question_id": "636766691a6d9265ec0173e2", "input": "/**Calls ChannelHandlerContext#fireUserEventTriggered(Object) to forward to the next in the ChannelPipeline.**/\n@Override public void exceptionCaught(final ChannelHandlerContext ctx,final Throwable cause){", "signature": "@Override public void exceptionCaught(final ChannelHandlerContext ctx,final Throwable cause){", "docstring": "Calls ChannelHandlerContext#fireUserEventTriggered(Object) to forward to the next in the ChannelPipeline."}
{"question_id": "636766811a6d9265ec017499", "input": "/**Check whether there is at least one instance of the implementation class in the lists. If so, true is returned. Otherwise, false is returned.**/\nprivate boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){", "signature": "private boolean checkDuplicate(final List<AtmosphereInterceptor> interceptorList,Class<? extends AtmosphereInterceptor> c){", "docstring": "Check whether there is at least one instance of the implementation class in the lists. If so, true is returned. Otherwise, false is returned."}
{"question_id": "636766fe1a6d9265ec017821", "input": "/**Append a byte array to a buffer.**/\nprotected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){", "signature": "protected void appendDetail(StringBuffer buffer,String fieldName,byte[] array){", "docstring": "Append a byte array to a buffer."}
{"question_id": "636767561a6d9265ec017f63", "input": "/**Check whether there are unvisited vertices. If so, return true. Otherwise, return false.**/\n@Override public boolean hasNext(){", "signature": "@Override public boolean hasNext(){", "docstring": "Check whether there are unvisited vertices. If so, return true. Otherwise, return false."}
{"question_id": "636766a81a6d9265ec017586", "input": "/**Pop the given number of elements from the stack.**/\nprivate void pop(final int elements){", "signature": "private void pop(final int elements){", "docstring": "Pop the given number of elements from the stack."}
{"question_id": "636767e11a6d9265ec018795", "input": "/**Check whether the existed buckets are the same as the buckets.**/\npublic boolean isCompatible(DataTable dataset){", "signature": "public boolean isCompatible(DataTable dataset){", "docstring": "Check whether the existed buckets are the same as the buckets."}
{"question_id": "636767791a6d9265ec018263", "input": "/**Find class by the given class name.**/\nprivate Class findClass(final String className) throws ClassNotFoundException {", "signature": "private Class findClass(final String className) throws ClassNotFoundException {", "docstring": "Find class by the given class name."}
{"question_id": "636767611a6d9265ec018112", "input": "/**Get next vertext from a graph.**/\n@Override protected V provideNextVertex(){", "signature": "@Override protected V provideNextVertex(){", "docstring": "Get next vertext from a graph."}
{"question_id": "636767131a6d9265ec017b23", "input": "/**Add the number of lines. **/\nfinal void addLineNumber(final int lineNumber){", "signature": "final void addLineNumber(final int lineNumber){", "docstring": "Add the number of lines. "}
{"question_id": "6367675a1a6d9265ec018010", "input": "/**Remove the doubly linked list node that call the function.**/\nvoid removeSelf(){", "signature": "void removeSelf(){", "docstring": "Remove the doubly linked list node that call the function."}
{"question_id": "636767dd1a6d9265ec0186f3", "input": "/**Change the elements whose values are oldName to newName in column**/\npublic void overrideName(String oldName,String newName){", "signature": "public void overrideName(String oldName,String newName){", "docstring": "Change the elements whose values are oldName to newName in column"}
{"question_id": "636767631a6d9265ec018171", "input": "/**Remove the doubly circular linked list node.If success return true,otherwise return false.**/\nprivate boolean unlink(ListNodeImpl<E> node){", "signature": "private boolean unlink(ListNodeImpl<E> node){", "docstring": "Remove the doubly circular linked list node.If success return true,otherwise return false."}
{"question_id": "636767de1a6d9265ec018726", "input": "/**Return a list whose nodes are sequences,and the sequences'lower bound are all minSequence,and the length increases sequentially with SEQUENCE_RANGE_BATCH_SIZE but the upper bound is maxSequence.**/\npublic List<SequenceRange> buildSequenceRanges(){", "signature": "public List<SequenceRange> buildSequenceRanges(){", "docstring": "Return a list whose nodes are sequences,and the sequences'lower bound are all minSequence,and the length increases sequentially with SEQUENCE_RANGE_BATCH_SIZE but the upper bound is maxSequence."}
{"question_id": "6367667c1a6d9265ec0173f7", "input": "/**If dataBytes is equal to null,return false,otherwise return true.**/\npublic boolean hasBytes(){", "signature": "public boolean hasBytes(){", "docstring": "If dataBytes is equal to null,return false,otherwise return true."}
{"question_id": "6367668d1a6d9265ec017568", "input": "/**Return hashVal which is not equal to zero.If hashVal is equal to zero at first,the function will use a hash method depends on a string to construct a new hashVal.**/\n@Override public int hashCode(){", "signature": "@Override public int hashCode(){", "docstring": "Return hashVal which is not equal to zero.If hashVal is equal to zero at first,the function will use a hash method depends on a string to construct a new hashVal."}
{"question_id": "6367676c1a6d9265ec018220", "input": "/**Return the path without the extension.**/\npublic static String stripFilenameExtension(String path){", "signature": "public static String stripFilenameExtension(String path){", "docstring": "Return the path without the extension."}
{"question_id": "636766fe1a6d9265ec017838", "input": "/**Return a string which is consist of the values of elements in the given array.If array is equal to null,return null,or return ArrayUtils.EMPTY_CHAR_ARRAY if the size of array is equal to zero.**/\npublic static char[] toPrimitive(final Character[] array){", "signature": "public static char[] toPrimitive(final Character[] array){", "docstring": "Return a string which is consist of the values of elements in the given array.If array is equal to null,return null,or return ArrayUtils.EMPTY_CHAR_ARRAY if the size of array is equal to zero."}
{"question_id": "636766fa1a6d9265ec01779c", "input": "/**Parses out a token until any of the given terminators is encountered and then return the token.**/\nprivate String parseToken(final char[] terminators){", "signature": "private String parseToken(final char[] terminators){", "docstring": "Parses out a token until any of the given terminators is encountered and then return the token."}
{"question_id": "636767691a6d9265ec0181a7", "input": "/**Trim all the characters which are equal to the given character and appear at the beginning of the given string,and return the trimmed string.**/\npublic static String trimLeadingCharacter(String str,char leadingCharacter){", "signature": "public static String trimLeadingCharacter(String str,char leadingCharacter){", "docstring": "Trim all the characters which are equal to the given character and appear at the beginning of the given string,and return the trimmed string."}
{"question_id": "636767041a6d9265ec01790f", "input": "/**Return an array of Integer objects which are converted from an array of primitive ints.(the other situations are like 636766fe1a6d9265ec017838)**/\npublic static Integer[] toObject(final int[] array){", "signature": "public static Integer[] toObject(final int[] array){", "docstring": "Return an array of Integer objects which are converted from an array of primitive ints.(the other situations are like 636766fe1a6d9265ec017838)"}
{"question_id": "636766fa1a6d9265ec0177a4", "input": "/**Return an array of Double objects which are converted from an array of primitive doubles.(similar to 636767041a6d9265ec01790f)**/\npublic static Double[] toObject(final double[] array){", "signature": "public static Double[] toObject(final double[] array){", "docstring": "Return an array of Double objects which are converted from an array of primitive doubles.(similar to 636767041a6d9265ec01790f)"}
{"question_id": "636767461a6d9265ec017d0e", "input": "/**Return a pair of the list of suffix sum and the sum of all elements of bounds.**/\nprivate Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){", "signature": "private Pair<List<Integer>,Long> computeSuffixSum(List<Integer> bounds){", "docstring": "Return a pair of the list of suffix sum and the sum of all elements of bounds."}
{"question_id": "636767491a6d9265ec017d90", "input": "/**Reverse the order of the given elements in the specified range.**/\npublic static final <V>void reverse(V[] arr,int from,int to){", "signature": "public static final <V>void reverse(V[] arr,int from,int to){", "docstring": "Reverse the order of the given elements in the specified range."}
{"question_id": "6367674a1a6d9265ec017da9", "input": "/**Move the nodes of the given doubly linked list to a new list sequentially.**/\nprivate void moveAllListNodes(DoublyLinkedList<E> list){", "signature": "private void moveAllListNodes(DoublyLinkedList<E> list){", "docstring": "Move the nodes of the given doubly linked list to a new list sequentially."}
{"question_id": "636767031a6d9265ec0178cd", "input": "/**Divide an int into four bytes and put the bytes into a byte vector called data in big endian order.The vector will be enlarged if necessary.And return the ByteVector object.**/\npublic ByteVector putInt(final int intValue){", "signature": "public ByteVector putInt(final int intValue){", "docstring": "Divide an int into four bytes and put the bytes into a byte vector called data in big endian order.The vector will be enlarged if necessary.And return the ByteVector object."}
{"question_id": "636767151a6d9265ec017b6b", "input": "/**Return true if the given string has the specified prefix with optional cases which can be ignored,or both string and prefix are null.Otherwise return false. **/\nprivate static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){", "signature": "private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){", "docstring": "Return true if the given string has the specified prefix with optional cases which can be ignored,or both string and prefix are null.Otherwise return false. "}
{"question_id": "636766fe1a6d9265ec01781c", "input": "/**Return the Character object converted from the given character.**/\npublic static Character toCharacterObject(final char ch){", "signature": "public static Character toCharacterObject(final char ch){", "docstring": "Return the Character object converted from the given character."}
{"question_id": "636766fb1a6d9265ec0177c1", "input": "/**Return true if the character is ASCII alphabetic upper case.Otherwise return false.**/\npublic static boolean isAsciiAlphaUpper(final char ch){", "signature": "public static boolean isAsciiAlphaUpper(final char ch){", "docstring": "Return true if the character is ASCII alphabetic upper case.Otherwise return false."}
{"question_id": "636767781a6d9265ec018250", "input": "/**Return a decision based on the message generated by the event and whether the given string is matched.**/\npublic int decide(LoggingEvent event){", "signature": "public int decide(LoggingEvent event){", "docstring": "Return a decision based on the message generated by the event and whether the given string is matched."}
{"question_id": "636766861a6d9265ec017553", "input": "/**Return true if the given name is a member variable of this template,otherwise return false.**/\npublic final boolean isTemplateVariablePresent(String name){", "signature": "public final boolean isTemplateVariablePresent(String name){", "docstring": "Return true if the given name is a member variable of this template,otherwise return false."}
{"question_id": "636767071a6d9265ec017962", "input": "/**Put all of the both readable and writable methods from the given map to this map.**/\npublic void putAllWriteable(BeanMap map){", "signature": "public void putAllWriteable(BeanMap map){", "docstring": "Put all of the both readable and writable methods from the given map to this map."}
{"question_id": "6367670a1a6d9265ec0179d9", "input": "/**Return the given string's length.If the string is null,and zero will be returned.**/\npublic static int length(final String str){", "signature": "public static int length(final String str){", "docstring": "Return the given string's length.If the string is null,and zero will be returned."}
{"question_id": "636767ab1a6d9265ec018676", "input": "/**Return true if the given character is a hex digit,otherwise return false.**/\nprivate static boolean isHex(final char c){", "signature": "private static boolean isHex(final char c){", "docstring": "Return true if the given character is a hex digit,otherwise return false."}
{"question_id": "636766f81a6d9265ec017748", "input": "/**Decoding a string follow the Base64 regular to an array,and return a string  constructed from the array according to UTF_8.**/\npublic static String base64Decode(final String s){", "signature": "public static String base64Decode(final String s){", "docstring": "Decoding a string follow the Base64 regular to an array,and return a string  constructed from the array according to UTF_8."}
{"question_id": "636766f11a6d9265ec017663", "input": "/**Return true if the length of array1 is the same as the length of array2 or both them are null,otherwise return false.**/\npublic static boolean isSameLength(final double[] array1,final double[] array2){", "signature": "public static boolean isSameLength(final double[] array1,final double[] array2){", "docstring": "Return true if the length of array1 is the same as the length of array2 or both them are null,otherwise return false."}
{"question_id": "6367667d1a6d9265ec0173ff", "input": "/**Return a Meteor object based on the HttpServletRequest r.**/\npublic static Meteor lookup(HttpServletRequest r){", "signature": "public static Meteor lookup(HttpServletRequest r){", "docstring": "Return a Meteor object based on the HttpServletRequest r."}
{"question_id": "636767691a6d9265ec0181a6", "input": "/**Split the given string toSplit at the first occurrence of the given delimiter,and return two substrings that don't include the delimiter.**/\npublic static String[] split(String toSplit,String delimiter){", "signature": "public static String[] split(String toSplit,String delimiter){", "docstring": "Split the given string toSplit at the first occurrence of the given delimiter,and return two substrings that don't include the delimiter."}
{"question_id": "636767601a6d9265ec0180e2", "input": "/**Select an edge which isn't a circle in the graph,compute the list of the minimal separators in the neighborhood of the edge and put the pair of list and edge into the return list.Repeat for each edge in the graph and then return the final list.**/\nprivate List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){", "signature": "private List<Pair<List<Pair<Integer,Integer>>,E>> computeGlobalSeparatorList(){", "docstring": "Select an edge which isn't a circle in the graph,compute the list of the minimal separators in the neighborhood of the edge and put the pair of list and edge into the return list.Repeat for each edge in the graph and then return the final list."}
{"question_id": "636766f31a6d9265ec01768f", "input": "/**Return a clone of the given array.**/\npublic static char[] clone(final char[] array){", "signature": "public static char[] clone(final char[] array){", "docstring": "Return a clone of the given array."}
{"question_id": "636766831a6d9265ec0174eb", "input": "/**Put the given array of files into a stack in reverse order. **/\nprivate void addReverse(final File[] files){", "signature": "private void addReverse(final File[] files){", "docstring": "Put the given array of files into a stack in reverse order. "}
{"question_id": "636767841a6d9265ec0183ff", "input": "/**Select the specified row in the given JTable and scroll the given JScrollPane to the row. **/\npublic static void selectRow(int row,JTable table,JScrollPane pane){", "signature": "public static void selectRow(int row,JTable table,JScrollPane pane){", "docstring": "Select the specified row in the given JTable and scroll the given JScrollPane to the row. "}
{"question_id": "636766621a6d9265ec017395", "input": "/**Draw a tree with a specified depth not exceeding three,otherwise throw an exception.**/\npublic void draw(){", "signature": "public void draw(){", "docstring": "Draw a tree with a specified depth not exceeding three,otherwise throw an exception."}
{"question_id": "636766a81a6d9265ec017596", "input": "/**Divide an int into four bytes and put the bytes into a byte vector called data in big endian order.The vector will be enlarged if necessary.And return the object.(\u548c636767031a6d9265ec0178cd\u4e00\u6837)**/\npublic ByteVector putInt(final int intValue){", "signature": "public ByteVector putInt(final int intValue){", "docstring": "Divide an int into four bytes and put the bytes into a byte vector called data in big endian order.The vector will be enlarged if necessary.And return the object.(\u548c636767031a6d9265ec0178cd\u4e00\u6837)"}
{"question_id": "636766fd1a6d9265ec017814", "input": "/**Given two arrays with the given length count,return true if the array a is equal to array b,otherwise return false.**/\npublic static boolean arrayequals(byte[] a,byte[] b,int count){", "signature": "public static boolean arrayequals(byte[] a,byte[] b,int count){", "docstring": "Given two arrays with the given length count,return true if the array a is equal to array b,otherwise return false."}
{"question_id": "636767861a6d9265ec018440", "input": "/**The given name can be split into several substrings by \".\",and abbreviate the name in the buf by deleting the first count substrings. **/\npublic void abbreviate(final int nameStart,final StringBuffer buf){", "signature": "public void abbreviate(final int nameStart,final StringBuffer buf){", "docstring": "The given name can be split into several substrings by \".\",and abbreviate the name in the buf by deleting the first count substrings. "}
{"question_id": "6367667d1a6d9265ec01741d", "input": "/**Resolve the class of the first bound for the typeVariable recursively,return Unknown.class if it can't be resolved.Otherwise return the bound.**/\npublic static Type resolveBound(TypeVariable<?> typeVariable){", "signature": "public static Type resolveBound(TypeVariable<?> typeVariable){", "docstring": "Resolve the class of the first bound for the typeVariable recursively,return Unknown.class if it can't be resolved.Otherwise return the bound."}
{"question_id": "6367675f1a6d9265ec0180cf", "input": "/**Return true if the subgraph of the given graph induced by the given vertices is a clique,otherwise return false.**/\nprivate static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){", "signature": "private static <V,E>boolean isClique(Graph<V,E> graph,Set<V> vertices){", "docstring": "Return true if the subgraph of the given graph induced by the given vertices is a clique,otherwise return false."}
{"question_id": "636767431a6d9265ec017c88", "input": "/**The type of key has several lower bounds conducted by different function,this function will return a list of the maximum lower bound of each key in the given list.**/\nprivate List<Integer> computeLowerBounds(List<K> keys){", "signature": "private List<Integer> computeLowerBounds(List<K> keys){", "docstring": "The type of key has several lower bounds conducted by different function,this function will return a list of the maximum lower bound of each key in the given list."}
{"question_id": "636766a91a6d9265ec0175c4", "input": "/**Pop different value of type based on the first character of the given descriptor.**/\nprivate void pop(final String descriptor){", "signature": "private void pop(final String descriptor){", "docstring": "Pop different value of type based on the first character of the given descriptor."}
{"question_id": "636766fb1a6d9265ec0177c3", "input": "/**Return true if the given character is a ASCII seven bit character,otherwise return false.**/\npublic static boolean isAscii(final char ch){", "signature": "public static boolean isAscii(final char ch){", "docstring": "Return true if the given character is a ASCII seven bit character,otherwise return false."}
{"question_id": "636767581a6d9265ec017fb4", "input": "/**The type of key has several upper bounds conducted by different function,this function will return a list of the minimum upper bound of each key in the given list.**/\nprivate List<Integer> computeUpperBounds(List<K> keys){", "signature": "private List<Integer> computeUpperBounds(List<K> keys){", "docstring": "The type of key has several upper bounds conducted by different function,this function will return a list of the minimum upper bound of each key in the given list."}
{"question_id": "636766801a6d9265ec017487", "input": "/**Encoding the given string by changing '{' and '}' to the specified character for each,return the string after encoding.**/\npublic static String encodeTemplateNames(String s){", "signature": "public static String encodeTemplateNames(String s){", "docstring": "Encoding the given string by changing '{' and '}' to the specified character for each,return the string after encoding."}
{"question_id": "636767531a6d9265ec017ef1", "input": "/**Using TOLERANCE_DOUBLE_COMPARATOR to compare two points for equality,return true the point p1 is equal to another point p2,otherwise return false.**/\npublic static boolean equals(Point2D p1,Point2D p2){", "signature": "public static boolean equals(Point2D p1,Point2D p2){", "docstring": "Using TOLERANCE_DOUBLE_COMPARATOR to compare two points for equality,return true the point p1 is equal to another point p2,otherwise return false."}
{"question_id": "6367667c1a6d9265ec0173fb", "input": "/**Adding an instance of AtmosphereResourceEventListener e into a list and return the  AtmosphereResource object which call the function.**/\n@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){", "signature": "@Override public AtmosphereResource addEventListener(AtmosphereResourceEventListener e){", "docstring": "Adding an instance of AtmosphereResourceEventListener e into a list and return the  AtmosphereResource object which call the function."}
{"question_id": "636766691a6d9265ec0173e3", "input": "/**Return the encoded string of the given element if isEnabled() or return an empty string.**/\npublic static String encode(AnsiElement element){", "signature": "public static String encode(AnsiElement element){", "docstring": "Return the encoded string of the given element if isEnabled() or return an empty string."}
{"question_id": "636767691a6d9265ec0181ac", "input": "/**Combine the substring before FOLDER_SEPARATOR of the given path with the given relative path to construct a new full file path,and return the full file path.**/\npublic static String applyRelativePath(String path,String relativePath){", "signature": "public static String applyRelativePath(String path,String relativePath){", "docstring": "Combine the substring before FOLDER_SEPARATOR of the given path with the given relative path to construct a new full file path,and return the full file path."}
{"question_id": "636767021a6d9265ec0178bc", "input": "/**Return the first index of the searchStr in the given string.**/\npublic static int indexOf(String str,String searchStr){", "signature": "public static int indexOf(String str,String searchStr){", "docstring": "Return the first index of the searchStr in the given string."}
{"question_id": "636766fc1a6d9265ec0177ef", "input": "/**Return a new array of strings converted from the elements which are not null of the given array,if the size of the array is zero,it will throw an exception.**/\nstatic String[] toNoNullStringArray(Object[] array){", "signature": "static String[] toNoNullStringArray(Object[] array){", "docstring": "Return a new array of strings converted from the elements which are not null of the given array,if the size of the array is zero,it will throw an exception."}
{"question_id": "636767061a6d9265ec01794a", "input": "/**Return the last index of the extension separator in the given filename,it will return -1 if the filename doesn't have the separator or there is a directory separator after it.**/\npublic static int indexOfExtension(String filename){", "signature": "public static int indexOfExtension(String filename){", "docstring": "Return the last index of the extension separator in the given filename,it will return -1 if the filename doesn't have the separator or there is a directory separator after it."}
{"question_id": "636767dd1a6d9265ec0186de", "input": "/**Return true if the timestamp minus the lastUpdateTimestamp is greater than expiredThreshold,otherwise return false.**/\npublic boolean isExpired(long timestamp,long expiredThreshold){", "signature": "public boolean isExpired(long timestamp,long expiredThreshold){", "docstring": "Return true if the timestamp minus the lastUpdateTimestamp is greater than expiredThreshold,otherwise return false."}
{"question_id": "6367675d1a6d9265ec018082", "input": "/**Return the edge connecting the previously returned node with the current node.**/\nEdge edgeToNext(){", "signature": "Edge edgeToNext(){", "docstring": "Return the edge connecting the previously returned node with the current node."}
{"question_id": "6367676b1a6d9265ec0181e9", "input": "/**Return true if starting at the given index,the given string matches the given substring.Otherwise return false.**/\npublic static boolean substringMatch(CharSequence str,int index,CharSequence substring){", "signature": "public static boolean substringMatch(CharSequence str,int index,CharSequence substring){", "docstring": "Return true if starting at the given index,the given string matches the given substring.Otherwise return false."}
{"question_id": "636767781a6d9265ec01823e", "input": "/**Haddling a logging event by using layout.format(),and if layout.ignoresThrowable() is true,it will continue to send the StrRep of the event.**/\nprotected void append(LoggingEvent event){", "signature": "protected void append(LoggingEvent event){", "docstring": "Haddling a logging event by using layout.format(),and if layout.ignoresThrowable() is true,it will continue to send the StrRep of the event."}
{"question_id": "6367670b1a6d9265ec017a05", "input": "/**Return the String object that contains the given character.**/\npublic static String toString(final char ch){", "signature": "public static String toString(final char ch){", "docstring": "Return the String object that contains the given character."}
{"question_id": "636767a31a6d9265ec01854f", "input": "/**Check if the field should be packed,if so,read the field and update the internal state. It will throw an exception when the process of reading is wrong.**/\nprivate void checkIfPackedField() throws IOException {", "signature": "private void checkIfPackedField() throws IOException {", "docstring": "Check if the field should be packed,if so,read the field and update the internal state. It will throw an exception when the process of reading is wrong."}
{"question_id": "636767a81a6d9265ec0185fc", "input": "/**Return a field tag, and if reach the EOF the tag will be zero.It will throw an exception when the tag is equal to zero after logical shift right  TAG_TYPE_BITS.**/\npublic int readTag() throws IOException {", "signature": "public int readTag() throws IOException {", "docstring": "Return a field tag, and if reach the EOF the tag will be zero.It will throw an exception when the tag is equal to zero after logical shift right  TAG_TYPE_BITS."}
{"question_id": "636766a81a6d9265ec017595", "input": "/**Put two bytes into a byte vector called data.The vector will be enlarged if necessary.And return the ByteVector object.**/\nfinal ByteVector put11(final int byteValue1,final int byteValue2){", "signature": "final ByteVector put11(final int byteValue1,final int byteValue2){", "docstring": "Put two bytes into a byte vector called data.The vector will be enlarged if necessary.And return the ByteVector object."}
{"question_id": "636766ae1a6d9265ec0175d8", "input": "/**Return the string that contains the content range from offset to limit(when limit is zero,the upper bound will be count-1) and count.**/\nprivate String buildContentRange(){", "signature": "private String buildContentRange(){", "docstring": "Return the string that contains the content range from offset to limit(when limit is zero,the upper bound will be count-1) and count."}
{"question_id": "636767e11a6d9265ec018790", "input": "/**Load the thread snapshots from the given file in the specified time range,and return the list of those thread snapshots.**/\npublic static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {", "signature": "public static List<ThreadSnapshot> parseFromFileWithTimeRange(File file,List<ProfileAnalyzeTimeRange> timeRanges) throws IOException {", "docstring": "Load the thread snapshots from the given file in the specified time range,and return the list of those thread snapshots."}
